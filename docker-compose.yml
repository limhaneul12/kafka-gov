services:
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: kafka_gov
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - kafka-network

  minio:
    image: minio/minio:RELEASE.2024-09-13T20-26-02Z
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"  # MinIO API
      - "9001:9001"  # MinIO Console
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s
    networks:
      - kafka-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - kafka-network
    restart: unless-stopped
    volumes:
      - redis_data:/data

  # 마이그레이션 전용 서비스
  migration:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=mysql+asyncmy://user:password@mysql:3306/kafka_gov?charset=utf8mb4
      # migrate.sh 스크립트용 환경 변수
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=user
      - DB_PASSWORD=password
      - DB_NAME=kafka_gov
      - KAFKA_BOOTSTRAP_SERVERS=kafka1:19092,kafka2:29092,kafka3:39092
      - KAFKA_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=1440
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    depends_on:
      mysql:
        condition: service_healthy
    volumes:
      - ./script:/app/script
    command: ["/app/script/migrate.sh"]
    networks:
      - kafka-network
    restart: "no"  # 한 번만 실행

  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      # Database 설정
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=user
      - DB_PASSWORD=password
      - DB_DATABASE=kafka_gov
      - DB_POOL_SIZE=10
      - DB_MAX_OVERFLOW=20
      - DB_ECHO=false
      # App 설정
      - APP_DEBUG=true
      - APP_LOG_LEVEL=INFO
      - APP_ENVIRONMENT=development
      # Kafka 설정
      - KAFKA_BOOTSTRAP_SERVERS=kafka1:19092,kafka2:29092,kafka3:39092
      - KAFKA_SECURITY_PROTOCOL=PLAINTEXT
      - KAFKA_REQUEST_TIMEOUT_MS=30000
      - KAFKA_RETRIES=3
      # Schema Registry 설정
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - SCHEMA_REGISTRY_TIMEOUT=30
      # MinIO/Storage 설정
      - STORAGE_ENDPOINT_URL=http://minio:9000
      - STORAGE_ACCESS_KEY=minioadmin
      - STORAGE_SECRET_KEY=minioadmin123
      - STORAGE_BUCKET_NAME=kafka-gov-schemas
      - STORAGE_REGION=us-east-1
      - STORAGE_USE_SSL=false
      # Redis/Celery 설정
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    depends_on:
      mysql:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      # migration:
      #   condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - kafka-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Celery Worker (메트릭 수집 작업 실행)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["uv", "run", "celery", "-A", "app.celery_app", "worker", "--loglevel=info"]
    environment:
      # Database 설정
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=user
      - DB_PASSWORD=password
      - DB_DATABASE=kafka_gov
      - DB_POOL_SIZE=10
      - DB_MAX_OVERFLOW=20
      - DB_ECHO=false
      # App 설정
      - APP_DEBUG=true
      - APP_LOG_LEVEL=INFO
      - APP_ENVIRONMENT=development
      # Kafka 설정
      - KAFKA_BOOTSTRAP_SERVERS=kafka1:19092,kafka2:29092,kafka3:39092
      - KAFKA_SECURITY_PROTOCOL=PLAINTEXT
      - KAFKA_REQUEST_TIMEOUT_MS=30000
      - KAFKA_RETRIES=3
      # Redis (Celery Broker/Backend)
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kafka-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Celery Beat (주기적 스케줄러)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["uv", "run", "celery", "-A", "app.celery_app", "beat", "--loglevel=info"]
    environment:
      # Database 설정
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=user
      - DB_PASSWORD=password
      - DB_DATABASE=kafka_gov
      - DB_POOL_SIZE=10
      - DB_MAX_OVERFLOW=20
      - DB_ECHO=false
      # App 설정
      - APP_DEBUG=true
      - APP_LOG_LEVEL=INFO
      - APP_ENVIRONMENT=development
      # Kafka 설정
      - KAFKA_BOOTSTRAP_SERVERS=kafka1:19092,kafka2:29092,kafka3:39092
      - KAFKA_SECURITY_PROTOCOL=PLAINTEXT
      - KAFKA_REQUEST_TIMEOUT_MS=30000
      - KAFKA_RETRIES=3
      # Redis (Celery Broker/Backend)
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - kafka-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    # nginx를 통해서만 접근
    expose:
      - "80"
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - kafka-network

  # Nginx 리버스 프록시
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      app:
        condition: service_healthy
      frontend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - kafka-network
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx


volumes:
  mysql_data:
  minio_data:
  redis_data:
  nginx_logs:

networks:
  kafka-network:
    external: true
