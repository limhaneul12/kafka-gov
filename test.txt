UP040 Type alias `TopicName` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/domain/models.py:55:1
   |
54 | # 타입 별칭
55 | TopicName: TypeAlias = str
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
56 | ChangeId: TypeAlias = str
57 | TeamName: TypeAlias = str
   |
help: Use the `type` keyword

UP040 Type alias `ChangeId` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/domain/models.py:56:1
   |
54 | # 타입 별칭
55 | TopicName: TypeAlias = str
56 | ChangeId: TypeAlias = str
   | ^^^^^^^^^^^^^^^^^^^^^^^^^
57 | TeamName: TypeAlias = str
58 | DocumentUrl: TypeAlias = str
   |
help: Use the `type` keyword

UP040 Type alias `TeamName` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/domain/models.py:57:1
   |
55 | TopicName: TypeAlias = str
56 | ChangeId: TypeAlias = str
57 | TeamName: TypeAlias = str
   | ^^^^^^^^^^^^^^^^^^^^^^^^^
58 | DocumentUrl: TypeAlias = str
   |
help: Use the `type` keyword

UP040 Type alias `DocumentUrl` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/domain/models.py:58:1
   |
56 | ChangeId: TypeAlias = str
57 | TeamName: TypeAlias = str
58 | DocumentUrl: TypeAlias = str
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: Use the `type` keyword

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
  --> app/topic/interface/parsers.py:33:13
   |
32 |         except yaml.YAMLError as e:
33 |             raise TopicBatchParseError(f"Invalid YAML format: {e!s}")
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
34 |         except ValidationError as e:
35 |             raise TopicBatchParseError(f"Validation error: {e!s}")
   |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
  --> app/topic/interface/parsers.py:35:13
   |
33 |             raise TopicBatchParseError(f"Invalid YAML format: {e!s}")
34 |         except ValidationError as e:
35 |             raise TopicBatchParseError(f"Validation error: {e!s}")
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
36 |         except Exception as e:
37 |             raise TopicBatchParseError(f"Parsing error: {e!s}")
   |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
  --> app/topic/interface/parsers.py:37:13
   |
35 |             raise TopicBatchParseError(f"Validation error: {e!s}")
36 |         except Exception as e:
37 |             raise TopicBatchParseError(f"Parsing error: {e!s}")
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
38 |
39 |     @staticmethod
   |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
  --> app/topic/interface/parsers.py:52:13
   |
51 |         except json.JSONDecodeError as e:
52 |             raise TopicBatchParseError(f"Invalid JSON format: {e!s}")
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
53 |         except ValidationError as e:
54 |             raise TopicBatchParseError(f"Validation error: {e!s}")
   |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
  --> app/topic/interface/parsers.py:54:13
   |
52 |             raise TopicBatchParseError(f"Invalid JSON format: {e!s}")
53 |         except ValidationError as e:
54 |             raise TopicBatchParseError(f"Validation error: {e!s}")
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
55 |         except Exception as e:
56 |             raise TopicBatchParseError(f"Parsing error: {e!s}")
   |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
  --> app/topic/interface/parsers.py:56:13
   |
54 |             raise TopicBatchParseError(f"Validation error: {e!s}")
55 |         except Exception as e:
56 |             raise TopicBatchParseError(f"Parsing error: {e!s}")
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
57 |
58 |     @staticmethod
   |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> app/topic/interface/parsers.py:103:13
    |
102 |         except Exception as e:
103 |             raise TopicBatchParseError(f"YAML serialization error: {e!s}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
104 |
105 |     @staticmethod
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> app/topic/interface/parsers.py:117:13
    |
116 |         except Exception as e:
117 |             raise TopicBatchParseError(f"JSON serialization error: {e!s}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> app/topic/interface/parsers.py:135:9
    |
134 |     except FileNotFoundError:
135 |         raise TopicBatchParseError(f"File not found: {file_path}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
136 |     except PermissionError:
137 |         raise TopicBatchParseError(f"Permission denied: {file_path}")
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> app/topic/interface/parsers.py:137:9
    |
135 |         raise TopicBatchParseError(f"File not found: {file_path}")
136 |     except PermissionError:
137 |         raise TopicBatchParseError(f"Permission denied: {file_path}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
138 |     except Exception as e:
139 |         raise TopicBatchParseError(f"File processing error: {e!s}")
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> app/topic/interface/parsers.py:139:9
    |
137 |         raise TopicBatchParseError(f"Permission denied: {file_path}")
138 |     except Exception as e:
139 |         raise TopicBatchParseError(f"File processing error: {e!s}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |

PERF401 Use a list comprehension to create a transformed list
   --> app/topic/interface/router.py:121:9
    |
119 |       plan_items = []
120 |       for item in plan.items:
121 | /         plan_items.append(
122 | |             ResponsePlanItem(
123 | |                 name=item.name,
124 | |                 action=item.action.value,
125 | |                 diff=item.diff,
126 | |                 current_config=item.current_config,
127 | |                 target_config=item.target_config,
128 | |             )
129 | |         )
    | |_________^
130 |
131 |       # 위반 사항 변환
    |
help: Replace for loop with list comprehension

PERF401 Use a list comprehension to create a transformed list
   --> app/topic/interface/router.py:134:9
    |
132 |       violations = []
133 |       for violation in plan.violations:
134 | /         violations.append(
135 | |             ResponseViolation(
136 | |                 name=violation.name,
137 | |                 rule=violation.rule,
138 | |                 message=violation.message,
139 | |                 severity=violation.severity,
140 | |                 field=violation.field,
141 | |             )
142 | |         )
    | |_________^
143 |
144 |       return TopicBatchDryRunResponse(
    |
help: Replace for loop with list comprehension

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> app/topic/interface/router.py:177:9
    |
176 |       except ValueError as e:
177 | /         raise HTTPException(
178 | |             status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
179 | |             detail=f"Validation error: {e!s}",
180 | |         )
    | |_________^
181 |       except Exception as e:
182 |           raise HTTPException(
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> app/topic/interface/router.py:182:9
    |
180 |           )
181 |       except Exception as e:
182 | /         raise HTTPException(
183 | |             status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
184 | |             detail=f"Internal server error: {e!s}",
185 | |         )
    | |_________^
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> app/topic/interface/router.py:220:9
    |
219 |       except ValueError as e:
220 | /         raise HTTPException(
221 | |             status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
222 | |             detail=f"Policy violation: {e!s}",
223 | |         )
    | |_________^
224 |       except Exception as e:
225 |           raise HTTPException(
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> app/topic/interface/router.py:225:9
    |
223 |           )
224 |       except Exception as e:
225 | /         raise HTTPException(
226 | |             status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
227 | |             detail=f"Internal server error: {e!s}",
228 | |         )
    | |_________^
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> app/topic/interface/router.py:263:9
    |
261 |           raise
262 |       except Exception as e:
263 | /         raise HTTPException(
264 | |             status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
265 | |             detail=f"Internal server error: {e!s}",
266 | |         )
    | |_________^
    |

PERF401 Use a list comprehension to create a transformed list
   --> app/topic/interface/router.py:295:13
    |
293 |           plan_items = []
294 |           for item in plan.items:
295 | /             plan_items.append(
296 | |                 ResponsePlanItem(
297 | |                     name=item.name,
298 | |                     action=item.action.value,
299 | |                     diff=item.diff,
300 | |                     current_config=item.current_config,
301 | |                     target_config=item.target_config,
302 | |                 )
303 | |             )
    | |_____________^
304 |
305 |           return TopicPlanResponse(
    |
help: Replace for loop with list comprehension

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> app/topic/interface/router.py:317:9
    |
315 |           raise
316 |       except Exception as e:
317 | /         raise HTTPException(
318 | |             status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
319 | |             detail=f"Internal server error: {e!s}",
320 | |         )
    | |_________^
    |

RUF022 `__all__` is not sorted
  --> app/topic/interface/types/__init__.py:27:11
   |
25 |   )
26 |
27 |   __all__ = [
   |  ___________^
28 | |     # Enums
29 | |     "Environment",
30 | |     "TopicAction",
31 | |     "CleanupPolicy",
32 | |     "CompressionType",
33 | |     # String types
34 | |     "TopicName",
35 | |     "ChangeId",
36 | |     "TeamName",
37 | |     "DocumentUrl",
38 | |     "SlaRequirement",
39 | |     "TagName",
40 | |     "ReasonText",
41 | |     "PlanStatus",
42 | |     "AuditId",
43 | |     "ErrorRule",
44 | |     "ErrorSeverity",
45 | |     "ErrorField",
46 | |     "ErrorMessage",
47 | |     "PlanAction",
48 | |     # Integer types
49 | |     "PartitionCount",
50 | |     "ReplicationFactor",
51 | |     "RetentionMs",
52 | |     "MinInsyncReplicas",
53 | |     "MaxMessageBytes",
54 | |     "SegmentMs",
55 | | ]
   | |_^
   |
help: Apply an isort-style sorting to `__all__`

UP040 Type alias `TopicName` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/interface/types/type_hints.py:43:1
   |
41 | # fmt: off
42 | # ===== 토픽 관련 타입 =====
43 | TopicName: TypeAlias = string_type(desc="토픽 이름(환경 접두사 포함)", max_=249, pattern=TOPIC_NAME_PATTERN)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
44 | TagName: TypeAlias = string_type(desc="태그 이름", max_=50, pattern=TAG_NAME_PATTERN)
   |
help: Use the `type` keyword

UP040 Type alias `TagName` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/interface/types/type_hints.py:44:1
   |
42 | # ===== 토픽 관련 타입 =====
43 | TopicName: TypeAlias = string_type(desc="토픽 이름(환경 접두사 포함)", max_=249, pattern=TOPIC_NAME_PATTERN)
44 | TagName: TypeAlias = string_type(desc="태그 이름", max_=50, pattern=TAG_NAME_PATTERN)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
45 |
46 | # ===== 팀/조직 관련 타입 =====
   |
help: Use the `type` keyword

UP040 Type alias `TeamName` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/interface/types/type_hints.py:47:1
   |
46 | # ===== 팀/조직 관련 타입 =====
47 | TeamName: TypeAlias = string_type(desc="팀 이름", max_=50, pattern=TEAM_NAME_PATTERN)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
48 | DocumentUrl: TypeAlias = string_type(desc="문서 URL", max_=500, pattern=DOCUMENT_URL_PATTERN)
49 | SlaRequirement: TypeAlias = string_type(desc="SLA 요구사항", max_=100)
   |
help: Use the `type` keyword

UP040 Type alias `DocumentUrl` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/interface/types/type_hints.py:48:1
   |
46 | # ===== 팀/조직 관련 타입 =====
47 | TeamName: TypeAlias = string_type(desc="팀 이름", max_=50, pattern=TEAM_NAME_PATTERN)
48 | DocumentUrl: TypeAlias = string_type(desc="문서 URL", max_=500, pattern=DOCUMENT_URL_PATTERN)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 | SlaRequirement: TypeAlias = string_type(desc="SLA 요구사항", max_=100)
   |
help: Use the `type` keyword

UP040 Type alias `SlaRequirement` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/interface/types/type_hints.py:49:1
   |
47 | TeamName: TypeAlias = string_type(desc="팀 이름", max_=50, pattern=TEAM_NAME_PATTERN)
48 | DocumentUrl: TypeAlias = string_type(desc="문서 URL", max_=500, pattern=DOCUMENT_URL_PATTERN)
49 | SlaRequirement: TypeAlias = string_type(desc="SLA 요구사항", max_=100)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
50 |
51 | # ===== 변경 관리 타입 =====
   |
help: Use the `type` keyword

UP040 Type alias `ChangeId` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/interface/types/type_hints.py:52:1
   |
51 | # ===== 변경 관리 타입 =====
52 | ChangeId: TypeAlias = string_type(desc="변경 ID(추적용)", max_=100, pattern=CHANGE_ID_PATTERN)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
53 | ReasonText: TypeAlias = string_type(desc="변경 사유", max_=500)
54 | PlanStatus: TypeAlias = string_type(desc="계획 상태", max_=10, pattern=PLAN_STATUS_PATTERN)
   |
help: Use the `type` keyword

UP040 Type alias `ReasonText` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/interface/types/type_hints.py:53:1
   |
51 | # ===== 변경 관리 타입 =====
52 | ChangeId: TypeAlias = string_type(desc="변경 ID(추적용)", max_=100, pattern=CHANGE_ID_PATTERN)
53 | ReasonText: TypeAlias = string_type(desc="변경 사유", max_=500)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
54 | PlanStatus: TypeAlias = string_type(desc="계획 상태", max_=10, pattern=PLAN_STATUS_PATTERN)
55 | PlanAction: TypeAlias = string_type(desc="실행될 액션", max_=10, pattern=PlanActionPattern)
   |
help: Use the `type` keyword

UP040 Type alias `PlanStatus` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/interface/types/type_hints.py:54:1
   |
52 | ChangeId: TypeAlias = string_type(desc="변경 ID(추적용)", max_=100, pattern=CHANGE_ID_PATTERN)
53 | ReasonText: TypeAlias = string_type(desc="변경 사유", max_=500)
54 | PlanStatus: TypeAlias = string_type(desc="계획 상태", max_=10, pattern=PLAN_STATUS_PATTERN)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
55 | PlanAction: TypeAlias = string_type(desc="실행될 액션", max_=10, pattern=PlanActionPattern)
   |
help: Use the `type` keyword

UP040 Type alias `PlanAction` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/interface/types/type_hints.py:55:1
   |
53 | ReasonText: TypeAlias = string_type(desc="변경 사유", max_=500)
54 | PlanStatus: TypeAlias = string_type(desc="계획 상태", max_=10, pattern=PLAN_STATUS_PATTERN)
55 | PlanAction: TypeAlias = string_type(desc="실행될 액션", max_=10, pattern=PlanActionPattern)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
56 |
57 | # ===== 감사/로깅 타입 =====
   |
help: Use the `type` keyword

UP040 Type alias `AuditId` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/interface/types/type_hints.py:58:1
   |
57 | # ===== 감사/로깅 타입 =====
58 | AuditId: TypeAlias = string_type(desc="감사 로그 ID", max_=100)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
59 |
60 | # ===== 에러/위반 타입 =====
   |
help: Use the `type` keyword

UP040 Type alias `ErrorRule` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/interface/types/type_hints.py:61:1
   |
60 | # ===== 에러/위반 타입 =====
61 | ErrorRule: TypeAlias = string_type(desc="위반 규칙", max_=100)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
62 | ErrorSeverity: TypeAlias = string_type(desc="심각도", max_=10, pattern=ERROR_SEVERITY_PATTERN)
63 | ErrorField: TypeAlias = string_type(desc="위반 필드", max_=100)
   |
help: Use the `type` keyword

UP040 Type alias `ErrorSeverity` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/interface/types/type_hints.py:62:1
   |
60 | # ===== 에러/위반 타입 =====
61 | ErrorRule: TypeAlias = string_type(desc="위반 규칙", max_=100)
62 | ErrorSeverity: TypeAlias = string_type(desc="심각도", max_=10, pattern=ERROR_SEVERITY_PATTERN)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
63 | ErrorField: TypeAlias = string_type(desc="위반 필드", max_=100)
64 | ErrorMessage: TypeAlias = string_type(desc="위반 메시지", max_=500)
   |
help: Use the `type` keyword

UP040 Type alias `ErrorField` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/interface/types/type_hints.py:63:1
   |
61 | ErrorRule: TypeAlias = string_type(desc="위반 규칙", max_=100)
62 | ErrorSeverity: TypeAlias = string_type(desc="심각도", max_=10, pattern=ERROR_SEVERITY_PATTERN)
63 | ErrorField: TypeAlias = string_type(desc="위반 필드", max_=100)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
64 | ErrorMessage: TypeAlias = string_type(desc="위반 메시지", max_=500)
   |
help: Use the `type` keyword

UP040 Type alias `ErrorMessage` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/interface/types/type_hints.py:64:1
   |
62 | ErrorSeverity: TypeAlias = string_type(desc="심각도", max_=10, pattern=ERROR_SEVERITY_PATTERN)
63 | ErrorField: TypeAlias = string_type(desc="위반 필드", max_=100)
64 | ErrorMessage: TypeAlias = string_type(desc="위반 메시지", max_=500)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
65 |
66 | # ===== Kafka 설정 타입 (정수) =====
   |
help: Use the `type` keyword

UP040 Type alias `PartitionCount` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/interface/types/type_hints.py:67:1
   |
66 | # ===== Kafka 설정 타입 (정수) =====
67 | PartitionCount: TypeAlias = int_type(desc="파티션 수", ge=1, le=1000)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
68 | ReplicationFactor: TypeAlias = int_type(desc="복제 팩터", ge=1, le=10)
69 | MinInsyncReplicas: TypeAlias = int_type(desc="최소 동기화 복제본 수", ge=1, le=10)
   |
help: Use the `type` keyword

UP040 Type alias `ReplicationFactor` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/interface/types/type_hints.py:68:1
   |
66 | # ===== Kafka 설정 타입 (정수) =====
67 | PartitionCount: TypeAlias = int_type(desc="파티션 수", ge=1, le=1000)
68 | ReplicationFactor: TypeAlias = int_type(desc="복제 팩터", ge=1, le=10)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
69 | MinInsyncReplicas: TypeAlias = int_type(desc="최소 동기화 복제본 수", ge=1, le=10)
   |
help: Use the `type` keyword

UP040 Type alias `MinInsyncReplicas` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/interface/types/type_hints.py:69:1
   |
67 | PartitionCount: TypeAlias = int_type(desc="파티션 수", ge=1, le=1000)
68 | ReplicationFactor: TypeAlias = int_type(desc="복제 팩터", ge=1, le=10)
69 | MinInsyncReplicas: TypeAlias = int_type(desc="최소 동기화 복제본 수", ge=1, le=10)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
70 |
71 | # ===== Kafka 성능/용량 타입 (정수) =====
   |
help: Use the `type` keyword

UP040 Type alias `RetentionMs` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/interface/types/type_hints.py:72:1
   |
71 | # ===== Kafka 성능/용량 타입 (정수) =====
72 | RetentionMs: TypeAlias = int_type(desc="보존 시간 (밀리초)", ge=1000, le=2147483647)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
73 | SegmentMs: TypeAlias = int_type(desc="세그먼트 롤링 시간 (밀리초)", ge=1000)
74 | MaxMessageBytes: TypeAlias = int_type(desc="최대 메시지 크기 (바이트)", ge=1000, le=100000000)
   |
help: Use the `type` keyword

UP040 Type alias `SegmentMs` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/interface/types/type_hints.py:73:1
   |
71 | # ===== Kafka 성능/용량 타입 (정수) =====
72 | RetentionMs: TypeAlias = int_type(desc="보존 시간 (밀리초)", ge=1000, le=2147483647)
73 | SegmentMs: TypeAlias = int_type(desc="세그먼트 롤링 시간 (밀리초)", ge=1000)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
74 | MaxMessageBytes: TypeAlias = int_type(desc="최대 메시지 크기 (바이트)", ge=1000, le=100000000)
   |
help: Use the `type` keyword

UP040 Type alias `MaxMessageBytes` uses `TypeAlias` annotation instead of the `type` keyword
  --> app/topic/interface/types/type_hints.py:74:1
   |
72 | RetentionMs: TypeAlias = int_type(desc="보존 시간 (밀리초)", ge=1000, le=2147483647)
73 | SegmentMs: TypeAlias = int_type(desc="세그먼트 롤링 시간 (밀리초)", ge=1000)
74 | MaxMessageBytes: TypeAlias = int_type(desc="최대 메시지 크기 (바이트)", ge=1000, le=100000000)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: Use the `type` keyword

Found 45 errors.
No fixes available (25 hidden fixes can be enabled with the `--unsafe-fixes` option).
